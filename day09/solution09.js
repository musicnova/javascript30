/**
 * @param {...(null|boolean|number|string|Array|Object)} args
 * @return {number}
 */
var argumentsLength = function(...args) {
/**
 * ЗАДАЧА: 2703. Return Length of Arguments Passed
 * СЛОЖНОСТЬ: Easy
 * 
 * ОПИСАНИЕ АЛГОРИТМА:
 * 
 * Данная задача требует создания функции, которая подсчитывает количество 
 * аргументов, переданных ей при вызове. Это фундаментальная задача на понимание 
 * работы с аргументами функций в JavaScript.
 * 
 * АЛГОРИТМ РЕШЕНИЯ:
 * 
 * 1. ИСПОЛЬЗОВАНИЕ REST PARAMETERS (оператор расширения):
 *    - Используем синтаксис "...args" в параметрах функции
 *    - Это позволяет собрать все переданные аргументы в массив
 *    - Rest parameters автоматически создает массив из всех аргументов
 * 
 * 2. ПОДСЧЕТ КОЛИЧЕСТВА ЭЛЕМЕНТОВ:
 *    - Используем свойство .length массива args
 *    - Это свойство возвращает количество элементов в массиве
 *    - Время выполнения: O(1) - константное время
 * 
 * 3. ВОЗВРАТ РЕЗУЛЬТАТА:
 *    - Просто возвращаем значение args.length
 *    - Никаких дополнительных вычислений не требуется
 * 
 * ВРЕМЕННАЯ СЛОЖНОСТЬ: O(1) - константное время
 * ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ: O(n) - где n это количество аргументов
 * 
 * АЛЬТЕРНАТИВНЫЕ ПОДХОДЫ:
 * - Можно использовать arguments объект (устаревший подход)
 * - Можно использовать Array.from(arguments) (менее эффективно)
 * - Rest parameters - современный и рекомендуемый подход
 */

    // Возвращаем длину массива аргументов
    // Rest parameter (...args) собирает все аргументы в массив
    // Свойство .length возвращает количество элементов в массиве
    return args.length;

/**
 * ДЕТАЛЬНЫЕ ОТВЕТЫ НА ВОЗМОЖНЫЕ ВОПРОСЫ:
 * 
 * Q: Почему используется rest parameters (...args) вместо arguments объекта?
 * A: Rest parameters - это современный ES6+ синтаксис, который:
 *    - Создает настоящий массив (не array-like объект)
 *    - Работает с arrow functions
 *    - Более читаемый и понятный код
 *    - Поддерживает все методы массивов без дополнительных преобразований
 * 
 * Q: Что произойдет, если не передать ни одного аргумента?
 * A: Функция вернет 0, так как args будет пустым массивом []
 *    Пример: argumentsLength() // возвращает 0
 * 
 * Q: Какие типы данных может принимать функция?
 * A: Согласно JSDoc комментарию, функция принимает:
 *    - null
 *    - boolean (true/false)
 *    - number (любые числа)
 *    - string (строки)
 *    - Array (массивы)
 *    - Object (объекты)
 * 
 * Q: Есть ли ограничения на количество аргументов?
 * A: По условию задачи: 0 <= args.length <= 100
 *    В реальности JavaScript может принять намного больше аргументов
 * 
 * Q: Влияет ли тип аргумента на подсчет?
 * A: Нет, функция считает только количество аргументов, не их тип или значение
 *    Примеры:
 *    - argumentsLength(null, undefined, 0, false, "") // возвращает 5
 *    - argumentsLength({}, [], "test", 123) // возвращает 4
 * 
 * Q: Можно ли модифицировать эту функцию для других целей?
 * A: Да, можно легко расширить функционал:
 *    - Подсчет аргументов определенного типа
 *    - Фильтрация аргументов по условию
 *    - Валидация типов аргументов
 * 
 * Q: Работает ли это с вложенными массивами?
 * A: Да, но каждый массив считается как один аргумент
 *    Пример: argumentsLength([1, 2], [3, 4]) // возвращает 2, не 4
 * 
 * Q: Какая производительность у этого решения?
 * A: Очень высокая:
 *    - Временная сложность: O(1) - константное время
 *    - Пространственная сложность: O(n) - линейная по количеству аргументов
 *    - Операция .length выполняется мгновенно
 * 
 * ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:
 * 
 * argumentsLength(5);                    // 1
 * argumentsLength({}, null, "3");        // 3  
 * argumentsLength();                     // 0
 * argumentsLength(1, 2, 3, 4, 5);       // 5
 * argumentsLength([1, 2, 3]);           // 1 (массив = один аргумент)
 * argumentsLength(true, false, null);    // 3
 */ 
};

/**
 * argumentsLength(1, 2, 3); // 3
 */
