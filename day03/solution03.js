type ToBeOrNotToBe = {
/*
Алгоритм решения задачи:
1. Функция expect принимает значение val любого типа, которое нужно проверить.
2. Она возвращает объект с двумя методами: toBe и notToBe.
3. Метод toBe принимает другое значение и сравнивает его с val с помощью строгого равенства (===).
   - Если значения равны, метод возвращает true.
   - Если значения не равны, метод выбрасывает ошибку с сообщением "Not Equal".
4. Метод notToBe принимает другое значение и сравнивает его с val с помощью строгого неравенства (!==).
   - Если значения не равны, метод возвращает true.
   - Если значения равны, метод выбрасывает ошибку с сообщением "Equal".
5. Таким образом, expect помогает тестировать код, проверяя совпадение или несовпадение значений,
   и при несоответствии выбрасывает ошибку, что удобно для автоматизированного тестирования.

Это решение универсально и работает с любыми типами данных, так как используется оператор строгого сравнения.
*/

    toBe: (val: any) => boolean;
    notToBe: (val: any) => boolean;
};

function expect(val: any): ToBeOrNotToBe {
    return {
        toBe: (otherVal: any) => {
            if (val === otherVal) {
                return true;
            } else {
                throw new Error("Not Equal");
            }
        },
        notToBe: (otherVal: any) => {
            if (val !== otherVal) {
                return true;
            } else {
                throw new Error("Equal");
            }
        }
    };

/*
Ответы на возможные вопросы:

1. Почему используется строгое равенство (===) и строгое неравенство (!==)?
   - Это обеспечивает точное сравнение без приведения типов, что важно для корректных тестов.
   
2. Что происходит, если значения не совпадают в toBe или совпадают в notToBe?
   - В этих случаях выбрасывается ошибка с сообщением "Not Equal" или "Equal" соответственно,
     что позволяет тестовой системе фиксировать ошибку.

3. Можно ли использовать expect с любыми типами данных?
   - Да, тип any позволяет передавать значения любого типа, включая объекты, числа, строки и т.д.

4. Как использовать эту функцию в тестах?
   - Вызывать expect с проверяемым значением, затем вызвать toBe или notToBe с ожидаемым значением.
   - Если проверка проходит, возвращается true.
   - Если проверка не проходит, выбрасывается ошибка с понятным сообщением.

5. Что делать с выброшенной ошибкой?
   - Обычно тестовые фреймворки ловят эти ошибки и отмечают тест как проваленный, что удобно для отладки.

Пример использования:
expect(5).toBe(5);        // вернет true
expect(5).toBe(null);     // выбросит ошибку "Not Equal"
expect(5).notToBe(null);  // вернет true
expect(5).notToBe(5);     // выбросит ошибку "Equal"
*/

};
